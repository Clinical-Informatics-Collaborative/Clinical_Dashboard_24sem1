print(head(aggregated_income_data))
print(head(aggregated_healthcare_expenses_data))
}
# Function to update heatmap
update_heatmap <- function(suburb_id) {
if (is.null(suburb_id)) {
return(NULL)
} else {
selected_suburb <- melbourne_suburbs[melbourne_suburbs$LOC_PID == suburb_id,]
patient_data_selected_suburb <- patient_data[patient_data$Suburb == selected_suburb$LOC_NAME,]
hm_race_survival_aggregated_data <- patient_data_selected_suburb %>%
dplyr::group_by(ETHNICITY, VALUE) %>%
tally()
output$raceSurvivalPlot <- renderPlot({
ggplot(hm_race_survival_aggregated_data,
aes(
x = ETHNICITY,
y = as.factor(VALUE),
fill = n
)) +
geom_tile() +
geom_text(aes(label = n), vjust = -0.3) +
scale_fill_gradient(low = "#CAE1FF",
high = "slateblue4",
name = "Count",
labels = scales::number_format(accuracy = 1)) +
labs(title = "Race vs. Survival Heatmap",
x = "Ethnicity",
y = "Survival") +
scale_y_discrete(labels=c("No", "Yes")) +
theme(
plot.title = element_text(face="bold"),
axis.text.x = element_text(angle = 90, vjust = 0.5),
axis.text.y = element_text(color = "black"))
})
income_breaks <- c(0, 40000, 50000, 70000, 100000, 999999999)
income_range_labels <- c("0-30k", "30-50k", "50-70k", "70-100k", ">100k")
patient_data_selected_suburb$IncomeRange <- cut(patient_data_selected_suburb$INCOME, breaks = income_breaks, labels = income_range_labels, right = FALSE, include.lowest = TRUE)
hm_income_range_survival_aggregated_data <- patient_data_selected_suburb %>%
dplyr::group_by(IncomeRange, VALUE) %>%
tally()
output$incomeRangeSurvivalPlot <- renderPlot({
ggplot(hm_income_range_survival_aggregated_data,
aes(
x = IncomeRange,
y = as.factor(VALUE),
fill = n
)) +
geom_tile() +
geom_text(aes(label = n), vjust = -0.3) +
scale_fill_gradient(low = "#CAE1FF",
high = "slateblue4",
name = "Count",
labels = scales::number_format(accuracy = 1)) +
labs(title = "Income Range vs. Survival Heatmap",
x = "Income range",
y = "Survival") +
scale_y_discrete(labels=c("No", "Yes")) +
theme(
plot.title = element_text(face="bold"),
axis.text.x = element_text(angle = 90, vjust = 0.5),
axis.text.y = element_text(color = "black"))
})
healthcare_expenses_breaks <- c(0, 50000, 100000, 200000, 500000, 1000000, 2000000, 999999999)
healthcare_expenses_labels <- c("0-50k", "50-100k", "100-200k", "200-500k", "500-1M", "1M-2M",">2M")
patient_data_selected_suburb$HealthcareExpensesRange <- cut(patient_data_selected_suburb$HEALTHCARE_EXPENSES, breaks = healthcare_expenses_breaks, labels = healthcare_expenses_labels, right = FALSE, include.lowest = TRUE)
hm_healthcare_expenses_survival_aggregated_data <- patient_data_selected_suburb %>%
dplyr::group_by(HealthcareExpensesRange, VALUE) %>%
tally()
output$healthcareExpensesSurvivalPlot <- renderPlot({
ggplot(hm_healthcare_expenses_survival_aggregated_data,
aes(
x = HealthcareExpensesRange,
y = as.factor(VALUE),
fill = n
)) +
geom_tile() +
geom_text(aes(label = n), vjust = -0.3) +
scale_fill_gradient(low = "#CAE1FF",
high = "slateblue4",
name = "Count",
labels = scales::number_format(accuracy = 1)) +
labs(title = "Healthcare Expenses vs. Survival Heatmap",
x = "Healthcare expenses",
y = "Survival") +
scale_y_discrete(labels=c("No", "Yes")) +
theme(
plot.title = element_text(face="bold"),
axis.text.x = element_text(angle = 90, vjust = 0.5),
axis.text.y = element_text(color = "black"))
})
}
}
}
shinyApp(ui, server)
ui <- dashboardPage(
skin = "purple",
dashboardHeader(title = "Clinical Dashboard"),
dashboardSidebar(
sidebarMenu(
menuItem("Map & Suburb Info", tabName = "map_suburb_info"),
menuItem("Kaplan-Meier Plot", tabName = "km_plot"),
menuItem("Global Heatmaps", tabName = "global_heatmaps")
)
),
dashboardBody(
tabItems(
tabItem(tabName = "map_suburb_info",
leafletOutput("melbourneMap"), # This map stays up always
tabsetPanel(
tabPanel("Suburb Info", uiOutput("suburbInfo")), # Info displays here
tabPanel("Local Heatmaps",  # Heatmaps related to the selected area
fluidRow(
column(width = 4, plotOutput("raceSurvivalPlot")),
column(width = 4, plotOutput("incomeRangeSurvivalPlot")),
column(width = 4, plotOutput("healthcareExpensesSurvivalPlot"))
)
)
)
),
tabItem(tabName = "km_plot",
fluidRow(
plotlyOutput("kmPlot")
)
)
)
)
)
server <- function(input, output, session) {
output$melbourneMap <- renderLeaflet({
leaflet(data = melbourne_suburbs) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(
layerId = ~ LOC_PID,
fillColor = ~ pal(total_patients),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE
),
label = ~ LOC_NAME,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"
)
) %>%
addLegend(
pal = pal,
values = ~ total_patients,
opacity = 0.7,
title = "Number of patients",
position = "bottomright"
)
})
observe({
# when hover on
hover_suburb_LOC_PID <- input$melbourneMap_shape_mouseover$id
update_suburb_info(hover_suburb_LOC_PID)
})
observeEvent(input$melbourneMap_shape_click, {
# when click on
clicked_suburb_LOC_PID <- input$melbourneMap_shape_click$id
update_heatmap(clicked_suburb_LOC_PID)
})
# Reactive values to manage data filtering
filtered_data <- reactive({
filtered_km_data
})
# Rendering the Kaplan-Meier plot
output$kmPlot <- renderPlotly({
# Use the reactive filtered_data
plot_data <- filtered_data()
get_kaplan_meier_plot1(plot_data, 'Year')
})
update_suburb_info <- function(selected_suburb_LOC_PID) {
output$suburbInfo <- renderUI({
if (is.null(selected_suburb_LOC_PID)) {
return(tags$div(""))
} else {
selected_suburb <- melbourne_suburbs[melbourne_suburbs$LOC_PID == selected_suburb_LOC_PID,]
return(tags$div(
tags$strong(selected_suburb$LOC_NAME, style = "font-size: 20px;"),
tags$div(
paste0(
"Total number of patients: ", selected_suburb$total_patients),
style = "font-size: 16px;"
),
tags$div(
paste0("Raito of patients: ", selected_suburb$ratio),
style = "font-size: 16px;"
),
tags$div(
paste0("Females: ", selected_suburb$female_count),
style = "font-size: 16px;"
),
tags$div(
paste0("Males: ", selected_suburb$male_count),
style = "font-size: 16px;"
),
style = "line-height: 1.5;"
))
}
})
}
# Function to update heatmap
update_heatmap <- function(suburb_id) {
if (is.null(suburb_id)) {
return(NULL)
} else {
selected_suburb <- melbourne_suburbs[melbourne_suburbs$LOC_PID == suburb_id,]
patient_data_selected_suburb <- patient_data[patient_data$Suburb == selected_suburb$LOC_NAME,]
hm_race_survival_aggregated_data <- patient_data_selected_suburb %>%
dplyr::group_by(ETHNICITY, VALUE) %>%
tally()
output$raceSurvivalPlot <- renderPlot({
ggplot(hm_race_survival_aggregated_data,
aes(
x = ETHNICITY,
y = as.factor(VALUE),
fill = n
)) +
geom_tile() +
geom_text(aes(label = n), vjust = -0.3) +
scale_fill_gradient(low = "#CAE1FF",
high = "slateblue4",
name = "Count",
labels = scales::number_format(accuracy = 1)) +
labs(title = "Race vs. Survival Heatmap",
x = "Ethnicity",
y = "Survival") +
scale_y_discrete(labels=c("No", "Yes")) +
theme(
plot.title = element_text(face="bold"),
axis.text.x = element_text(angle = 90, vjust = 0.5),
axis.text.y = element_text(color = "black"))
})
income_breaks <- c(0, 40000, 50000, 70000, 100000, 999999999)
income_range_labels <- c("0-30k", "30-50k", "50-70k", "70-100k", ">100k")
patient_data_selected_suburb$IncomeRange <- cut(patient_data_selected_suburb$INCOME, breaks = income_breaks, labels = income_range_labels, right = FALSE, include.lowest = TRUE)
hm_income_range_survival_aggregated_data <- patient_data_selected_suburb %>%
dplyr::group_by(IncomeRange, VALUE) %>%
tally()
output$incomeRangeSurvivalPlot <- renderPlot({
ggplot(hm_income_range_survival_aggregated_data,
aes(
x = IncomeRange,
y = as.factor(VALUE),
fill = n
)) +
geom_tile() +
geom_text(aes(label = n), vjust = -0.3) +
scale_fill_gradient(low = "#CAE1FF",
high = "slateblue4",
name = "Count",
labels = scales::number_format(accuracy = 1)) +
labs(title = "Income Range vs. Survival Heatmap",
x = "Income range",
y = "Survival") +
scale_y_discrete(labels=c("No", "Yes")) +
theme(
plot.title = element_text(face="bold"),
axis.text.x = element_text(angle = 90, vjust = 0.5),
axis.text.y = element_text(color = "black"))
})
healthcare_expenses_breaks <- c(0, 50000, 100000, 200000, 500000, 1000000, 2000000, 999999999)
healthcare_expenses_labels <- c("0-50k", "50-100k", "100-200k", "200-500k", "500-1M", "1M-2M",">2M")
patient_data_selected_suburb$HealthcareExpensesRange <- cut(patient_data_selected_suburb$HEALTHCARE_EXPENSES, breaks = healthcare_expenses_breaks, labels = healthcare_expenses_labels, right = FALSE, include.lowest = TRUE)
hm_healthcare_expenses_survival_aggregated_data <- patient_data_selected_suburb %>%
dplyr::group_by(HealthcareExpensesRange, VALUE) %>%
tally()
output$healthcareExpensesSurvivalPlot <- renderPlot({
ggplot(hm_healthcare_expenses_survival_aggregated_data,
aes(
x = HealthcareExpensesRange,
y = as.factor(VALUE),
fill = n
)) +
geom_tile() +
geom_text(aes(label = n), vjust = -0.3) +
scale_fill_gradient(low = "#CAE1FF",
high = "slateblue4",
name = "Count",
labels = scales::number_format(accuracy = 1)) +
labs(title = "Healthcare Expenses vs. Survival Heatmap",
x = "Healthcare expenses",
y = "Survival") +
scale_y_discrete(labels=c("No", "Yes")) +
theme(
plot.title = element_text(face="bold"),
axis.text.x = element_text(angle = 90, vjust = 0.5),
axis.text.y = element_text(color = "black"))
})
}
}
}
shinyApp(ui, server)
ui <- dashboardPage(
skin = "purple",
dashboardHeader(title = "Clinical Dashboard"),
dashboardSidebar(
sidebarMenu(
menuItem("Map & Suburb Info", tabName = "map_suburb_info"),
menuItem("Kaplan-Meier Plot", tabName = "km_plot")
)
),
dashboardBody(
tabItems(
tabItem(tabName = "map_suburb_info",
leafletOutput("melbourneMap"), # This map stays up always
tabsetPanel(
tabPanel("Suburb Info", uiOutput("suburbInfo")), # Info displays here
tabPanel("Local Heatmaps",  # Heatmaps related to the selected area
fluidRow(
column(width = 4, plotOutput("raceSurvivalPlot")),
column(width = 4, plotOutput("incomeRangeSurvivalPlot")),
column(width = 4, plotOutput("healthcareExpensesSurvivalPlot"))
)
)
)
),
tabItem(tabName = "km_plot",
fluidRow(
plotlyOutput("kmPlot")
)
)
)
)
)
server <- function(input, output, session) {
output$melbourneMap <- renderLeaflet({
leaflet(data = melbourne_suburbs) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(
layerId = ~ LOC_PID,
fillColor = ~ pal(total_patients),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE
),
label = ~ LOC_NAME,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"
)
) %>%
addLegend(
pal = pal,
values = ~ total_patients,
opacity = 0.7,
title = "Number of patients",
position = "bottomright"
)
})
observe({
# when hover on
hover_suburb_LOC_PID <- input$melbourneMap_shape_mouseover$id
update_suburb_info(hover_suburb_LOC_PID)
})
observeEvent(input$melbourneMap_shape_click, {
# when click on
clicked_suburb_LOC_PID <- input$melbourneMap_shape_click$id
update_heatmap(clicked_suburb_LOC_PID)
})
# Reactive values to manage data filtering
filtered_data <- reactive({
filtered_km_data
})
# Rendering the Kaplan-Meier plot
output$kmPlot <- renderPlotly({
# Use the reactive filtered_data
plot_data <- filtered_data()
get_kaplan_meier_plot1(plot_data, 'Year')
})
update_suburb_info <- function(selected_suburb_LOC_PID) {
output$suburbInfo <- renderUI({
if (is.null(selected_suburb_LOC_PID)) {
return(tags$div(""))
} else {
selected_suburb <- melbourne_suburbs[melbourne_suburbs$LOC_PID == selected_suburb_LOC_PID,]
return(tags$div(
tags$strong(selected_suburb$LOC_NAME, style = "font-size: 20px;"),
tags$div(
paste0(
"Total number of patients: ", selected_suburb$total_patients),
style = "font-size: 16px;"
),
tags$div(
paste0("Raito of patients: ", selected_suburb$ratio),
style = "font-size: 16px;"
),
tags$div(
paste0("Females: ", selected_suburb$female_count),
style = "font-size: 16px;"
),
tags$div(
paste0("Males: ", selected_suburb$male_count),
style = "font-size: 16px;"
),
style = "line-height: 1.5;"
))
}
})
}
# Function to update heatmap
update_heatmap <- function(suburb_id) {
if (is.null(suburb_id)) {
return(NULL)
} else {
selected_suburb <- melbourne_suburbs[melbourne_suburbs$LOC_PID == suburb_id,]
patient_data_selected_suburb <- patient_data[patient_data$Suburb == selected_suburb$LOC_NAME,]
hm_race_survival_aggregated_data <- patient_data_selected_suburb %>%
dplyr::group_by(ETHNICITY, VALUE) %>%
tally()
output$raceSurvivalPlot <- renderPlot({
ggplot(hm_race_survival_aggregated_data,
aes(
x = ETHNICITY,
y = as.factor(VALUE),
fill = n
)) +
geom_tile() +
geom_text(aes(label = n), vjust = -0.3) +
scale_fill_gradient(low = "#CAE1FF",
high = "slateblue4",
name = "Count",
labels = scales::number_format(accuracy = 1)) +
labs(title = "Race vs. Survival Heatmap",
x = "Ethnicity",
y = "Survival") +
scale_y_discrete(labels=c("No", "Yes")) +
theme(
plot.title = element_text(face="bold"),
axis.text.x = element_text(angle = 90, vjust = 0.5),
axis.text.y = element_text(color = "black"))
})
income_breaks <- c(0, 40000, 50000, 70000, 100000, 999999999)
income_range_labels <- c("0-30k", "30-50k", "50-70k", "70-100k", ">100k")
patient_data_selected_suburb$IncomeRange <- cut(patient_data_selected_suburb$INCOME, breaks = income_breaks, labels = income_range_labels, right = FALSE, include.lowest = TRUE)
hm_income_range_survival_aggregated_data <- patient_data_selected_suburb %>%
dplyr::group_by(IncomeRange, VALUE) %>%
tally()
output$incomeRangeSurvivalPlot <- renderPlot({
ggplot(hm_income_range_survival_aggregated_data,
aes(
x = IncomeRange,
y = as.factor(VALUE),
fill = n
)) +
geom_tile() +
geom_text(aes(label = n), vjust = -0.3) +
scale_fill_gradient(low = "#CAE1FF",
high = "slateblue4",
name = "Count",
labels = scales::number_format(accuracy = 1)) +
labs(title = "Income Range vs. Survival Heatmap",
x = "Income range",
y = "Survival") +
scale_y_discrete(labels=c("No", "Yes")) +
theme(
plot.title = element_text(face="bold"),
axis.text.x = element_text(angle = 90, vjust = 0.5),
axis.text.y = element_text(color = "black"))
})
healthcare_expenses_breaks <- c(0, 50000, 100000, 200000, 500000, 1000000, 2000000, 999999999)
healthcare_expenses_labels <- c("0-50k", "50-100k", "100-200k", "200-500k", "500-1M", "1M-2M",">2M")
patient_data_selected_suburb$HealthcareExpensesRange <- cut(patient_data_selected_suburb$HEALTHCARE_EXPENSES, breaks = healthcare_expenses_breaks, labels = healthcare_expenses_labels, right = FALSE, include.lowest = TRUE)
hm_healthcare_expenses_survival_aggregated_data <- patient_data_selected_suburb %>%
dplyr::group_by(HealthcareExpensesRange, VALUE) %>%
tally()
output$healthcareExpensesSurvivalPlot <- renderPlot({
ggplot(hm_healthcare_expenses_survival_aggregated_data,
aes(
x = HealthcareExpensesRange,
y = as.factor(VALUE),
fill = n
)) +
geom_tile() +
geom_text(aes(label = n), vjust = -0.3) +
scale_fill_gradient(low = "#CAE1FF",
high = "slateblue4",
name = "Count",
labels = scales::number_format(accuracy = 1)) +
labs(title = "Healthcare Expenses vs. Survival Heatmap",
x = "Healthcare expenses",
y = "Survival") +
scale_y_discrete(labels=c("No", "Yes")) +
theme(
plot.title = element_text(face="bold"),
axis.text.x = element_text(angle = 90, vjust = 0.5),
axis.text.y = element_text(color = "black"))
})
}
}
}
shinyApp(ui, server)
